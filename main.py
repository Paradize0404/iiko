import os
import logging
from typing import List
from fastapi import FastAPI, Request
from pydantic import BaseModel
import httpx

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

app = FastAPI()

class StopItem(BaseModel):
    productId: str
    productName: str
    available: bool
    timestamp: str

# üöÄ –ó–∞–ø—Ä–æ—Å –≤ iiko –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def on_startup():
    org_id = os.getenv("IIKO_ORG_ID")
    if not org_id:
        log.warning("‚ùóÔ∏è IIKO_ORG_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø—Ä–æ—Å –≤ iiko –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return
    try:
        log.info("üü¢ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ª—É—á–∞—é —Å—Ç–æ–ø-–ª–∏—Å—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ %s", org_id)
        stoplist = await fetch_stoplist_from_iiko(org_id)
        log.info("üìã –°–¢–û–ü-–õ–ò–°–¢ –ü–†–ò –°–¢–ê–†–¢–ï: %s", stoplist)
    except Exception as e:
        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: %s", str(e))

# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è webhook –æ—Ç iiko
@app.post("/stoplist")
async def receive_stoplist(request: Request):
    try:
        json_data = await request.json()
        log.info("üì¶ –í–µ–±—Ö—É–∫ –æ—Ç iiko: %s", json_data)

        if isinstance(json_data, list):
            event = json_data[0]
        else:
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ä–Ω–µ JSON")

        org_id = event.get("organizationId")
        if not org_id:
            raise ValueError("–ù–µ—Ç organizationId –≤ webhook")

        stoplist = await fetch_stoplist_from_iiko(org_id)
        log.info("üì• –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –°–¢–û–ü-–õ–ò–°–¢: %s", stoplist)

        return {"status": "ok", "items": len(stoplist)}
    except Exception as e:
        log.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: %s", str(e))
        return {"status": "error", "message": str(e)}

# üîå –ó–∞–ø—Ä–æ—Å –≤ iiko Cloud
async def fetch_stoplist_from_iiko(organization_id: str):
    api_key = os.getenv("IIKO_API_KEY")
    if not api_key:
        raise RuntimeError("IIKO_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    log.info("üîê –¢–µ–∫—É—â–∏–π IIKO_API_KEY (–æ–±—Ä–µ–∑–∞–Ω): %s...", api_key[:6])

    url = "https://api-ru.iiko.services/api/1/stopLists"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    payload = {"organizationId": organization_id}

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
